(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Mdex, createIcon, createSep, drawImage, drawLink, fixShortcut, getState, isMac, redo, shortcuts, toggleBlockquote, toggleBold, toggleFullScreen, toggleItalic, toggleOrderedList, togglePreview, toggleUnOrderedList, undo, wordCount, _replaceSelection, _toggleLine,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

isMac = /Mac/.test(navigator.platform);

shortcuts = {
  'Cmd-B': toggleBold,
  'Cmd-I': toggleItalic,
  'Cmd-K': drawLink,
  'Cmd-Alt-I': drawImage,
  "Cmd-'": toggleBlockquote,
  'Cmd-Alt-L': toggleOrderedList,
  'Cmd-L': toggleUnOrderedList
};

fixShortcut = function(name) {
  if (isMac) {
    name = name.replace('Ctrl', 'Cmd');
  } else {
    name = name.replace('Cmd', 'Ctrl');
  }
  return name;
};

createIcon = function(name, options) {
  var el, shortcut;
  options = options || {};
  el = document.createElement('a');
  shortcut = options.shortcut || shortcuts[name];
  if (shortcut) {
    shortcut = fixShortcut(shortcut);
    el.title = shortcut;
    el.title = el.title.replace('Cmd', '⌘');
    if (isMac) {
      el.title = el.title.replace('Alt', '⌥');
    }
  }
  el.className = options.className || 'icon-' + name;
  return el;
};

createSep = function() {
  var el;
  el = document.createElement('i');
  el.className = 'separator';
  el.innerHTML = '|';
  return el;
};

getState = function(cm, pos) {
  var data, i, ret, stat, text, types, _i, _len;
  pos = pos || cm.getCursor('start');
  stat = cm.getTokenAt(pos);
  if (!stat.type) {
    return {};
  }
  types = stat.type.split(' ');
  ret = {};
  data = null;
  text = null;
  for (i = _i = 0, _len = types.length; _i < _len; i = ++_i) {
    data = types[i];
    if (data === 'strong') {
      ret.bold = true;
    } else if (data === 'variable-2') {
      text = cm.getLine(pos.line);
      if (/^\s*\d+\.\s/.test(text)) {
        ret['ordered-list'] = true;
      } else {
        ret['unordered-list'] = true;
      }
    } else if (data === 'atom') {
      ret.quote = true;
    } else if (data === 'em') {
      ret.italic = true;
    }
  }
  return ret;
};

toggleFullScreen = function(editor) {
  var cancel, doc, el, isFull, request;
  el = editor.codemirror.getWrapperElement();
  doc = document;
  isFull = doc.fullScreen || doc.mozFullScreen || doc.webkitFullScreen;
  request = function() {
    if (el.requestFullScreen) {
      return el.requestFullScreen();
    } else if (el.mozRequestFullScreen) {
      return el.mozRequestFullScreen();
    } else if (el.webkitRequestFullScreen) {
      return el.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
    }
  };
  cancel = function() {
    if (doc.cancelFullScreen) {
      return doc.cancelFullScreen();
    } else if (doc.mozCancelFullScreen) {
      return doc.mozCancelFullScreen();
    } else if (doc.webkitCancelFullScreen) {
      return doc.webkitCancelFullScreen();
    }
  };
  if (!isFull) {
    return request();
  } else if (cancel) {
    return cancel();
  }
};

toggleBold = function(editor) {
  var cm, end, endPoint, start, startPoint, stat, text;
  cm = editor.codemirror;
  stat = getState(cm);
  text = null;
  start = '**';
  end = '**';
  startPoint = cm.getCursor('start');
  endPoint = cm.getCursor('end');
  if (stat.bold) {
    text = cm.getLine(startPoint.line);
    start = text.slice(0, startPoint.ch);
    end = text.slice(startPoint.ch);
    start = start.replace(/^(.*)?(\*|\_){2}(\S+.*)?$/, '$1$3');
    end = end.replace(/^(.*\S+)?(\*|\_){2}(\s+.*)?$/, '$1$3');
    startPoint.ch -= 2;
    endPoint.ch += 2;
    cm.replaceRange(end, startPoint, endPoint);
  } else {
    text = cm.getSelection();
    cm.replaceSelection(start + text + end);
    startPoint.ch += 2;
    endPoint.ch += 2;
  }
  cm.setSelection(startPoint, endPoint);
  return cm.focus();
};

toggleItalic = function(editor) {
  var cm, end, endPoint, start, startPoint, stat, text;
  cm = editor.codemirror;
  stat = getState(cm);
  text = null;
  start = '*';
  end = '*';
  startPoint = cm.getCursor('start');
  endPoint = cm.getCursor('end');
  if (stat.italic) {
    text = cm.getLine(startPoint.line);
    start = text.slice(0, startPoint.ch);
    end = text.slice(startPoint.ch);
    start = start.replace(/^(.*)?(\*|\_)(\S+.*)?$/, '$1$3');
    end = end.replace(/^(.*\S+)?(\*|\_)(\s+.*)?$/, '$1$3');
    startPoint.ch -= 1;
    endPoint.ch += 1;
    cm.replaceRange(end, startPoint, endPoint);
  } else {
    text = cm.getSelection();
    cm.replaceSelection(start + text + end);
    startPoint.ch += 1;
    endPoint.ch += 1;
  }
  cm.setSelection(startPoint, endPoint);
  return cm.focus();
};

toggleBlockquote = function(editor) {
  var cm;
  cm = editor.codemirror;
  return _toggleLine(cm, 'quote');
};

toggleUnOrderedList = function(editor) {
  var cm;
  cm = editor.codemirror;
  return _toggleLine(cm, 'unordered-list');
};

toggleOrderedList = function(editor) {
  var cm;
  cm = editor.codemirror;
  return _toggleLine(cm, 'ordered-list');
};

drawLink = function(editor) {
  var cm, stat;
  cm = editor.codemirror;
  stat = getState(cm);
  return _replaceSelection(cm, stat.link, '[', '](http:#)');
};

drawImage = function(editor) {
  var cm, stat;
  cm = editor.codemirror;
  stat = getState(cm);
  return _replaceSelection(cm, stat.image, '![', '](http:#)');
};

undo = function(editor) {
  var cm;
  cm = editor.codemirror;
  cm.undo();
  return cm.focus();
};

redo = function(editor) {
  var cm;
  cm = editor.codemirror;
  cm.redo();
  return cm.focus();
};

togglePreview = function(editor) {
  var cm, parse, preview, text, toolbar, wrapper;
  toolbar = editor.toolbar.preview;
  parse = editor.constructor.markdown;
  cm = editor.codemirror;
  wrapper = cm.getWrapperElement();
  preview = wrapper.lastChild;
  if (!/editor-preview/.test(preview.className)) {
    preview = document.createElement('div');
    preview.className = 'editor-preview';
    wrapper.appendChild(preview);
  }
  if (/editor-preview-active/.test(preview.className)) {
    preview.className = preview.className.replace(/\s*editor-preview-active\s*/g, '');
    toolbar.className = toolbar.className.replace(/\s*active\s*/g, '');
  } else {
    setTimeout((function() {
      return preview.className += ' editor-preview-active';
    }), 1);
    toolbar.className += ' active';
  }
  text = cm.getValue();
  return preview.innerHTML = parse(text);
};

_replaceSelection = function(cm, active, start, end) {
  var endPoint, startPoint, text;
  text = null;
  startPoint = cm.getCursor('start');
  endPoint = cm.getCursor('end');
  if (active) {
    text = cm.getLine(startPoint.line);
    start = text.slice(0, startPoint.ch);
    end = text.slice(startPoint.ch);
    cm.setLine(startPoint.line, start + end);
  } else {
    text = cm.getSelection();
    cm.replaceSelection(start + text + end);
    startPoint.ch += start.length;
    endPoint.ch += start.length;
  }
  cm.setSelection(startPoint, endPoint);
  return cm.focus();
};

_toggleLine = function(cm, name) {
  var endPoint, i, map, repl, startPoint, stat, _fn, _i, _ref, _ref1;
  stat = getState(cm);
  startPoint = cm.getCursor('start');
  endPoint = cm.getCursor('end');
  repl = {
    quote: /^(\s*)\>\s+/,
    'unordered-list': /^(\s*)(\*|\-|\+)\s+/,
    'ordered-list': /^(\s*)\d+\.\s+/
  };
  map = {
    quote: '> ',
    'unordered-list': '* ',
    'ordered-list': '1. '
  };
  _fn = (function(_this) {
    return function(i) {
      var text;
      text = cm.getLine(i);
      if (stat[name]) {
        text = text.replace(repl[name], '$1');
      } else {
        text = map[name] + text;
      }
      return cm.setLine(i, text);
    };
  })(this);
  for (i = _i = _ref = startPoint.line, _ref1 = endPoint.line; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
    _fn(i);
  }
  return cm.focus();
};

wordCount = function(data) {
  var count, i, m, pattern, _i, _ref;
  pattern = /[a-zA-Z0-9_\u0392-\u03c9]+|[\u4E00-\u9FFF\u3400-\u4dbf\uf900-\ufaff\u3040-\u309f\uac00-\ud7af]+/g;
  m = data.match(pattern);
  count = 0;
  if (m === null) {
    return count;
  }
  for (i = _i = 0, _ref = m.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    if (m[i].charCodeAt(0) >= 0x4E00) {
      count += m[i].length;
    } else {
      count += 1;
    }
  }
  return count;
};

Mdex = (function() {
  Mdex.markdown = function(text) {
    return marked(text);
  };

  Mdex.toggleBold = toggleBold;

  Mdex.toggleItalic = toggleItalic;

  Mdex.toggleBlockquote = toggleBlockquote;

  Mdex.toggleUnOrderedList = toggleUnOrderedList;

  Mdex.toggleOrderedList = toggleOrderedList;

  Mdex.drawLink = drawLink;

  Mdex.drawImage = drawImage;

  Mdex.undo = undo;

  Mdex.redo = redo;

  Mdex.toggleFullScreen = toggleFullScreen;

  Mdex.prototype.toggleBold = function() {
    return toggleBold(this);
  };

  Mdex.prototype.toggleItalic = function() {
    return toggleItalic(this);
  };

  function Mdex(options) {
    var _ref;
    if (options == null) {
      options = {};
    }
    this.toggleItalic = __bind(this.toggleItalic, this);
    this.toggleBold = __bind(this.toggleBold, this);
    if (options.element) {
      this.element = options.element;
    }
    if (options.previewTarget) {
      this.previewTarget = options.previewTarget;
    }
    if (options.editorTarget) {
      this.editorTarget = options.editorTarget;
    }
    options.toolbar = (_ref = options.toolbar) != null ? _ref : Mdex.toolbar;
    if (!options.hasOwnProperty('status')) {
      options.status = ['lines', 'words', 'cursor'];
    }
    this.options = options;
    if (this.element) {
      this.render();
    }
  }

  Mdex.prototype.render = function(el) {
    var $preview, key, keyMaps, options, _fn, _i, _len;
    if (!el) {
      el = document.querySelector(this.editorTarget);
    }
    if (this._rendered && this._rendered === el) {
      return;
    }
    this.element = el;
    options = this.options;
    keyMaps = {};
    _fn = (function(_this) {
      return function(key) {
        return keyMaps[fixShortcut(key)] = function(cm) {
          return shortcuts[key](_this);
        };
      };
    })(this);
    for (_i = 0, _len = shortcuts.length; _i < _len; _i++) {
      key = shortcuts[_i];
      _fn(key);
    }
    keyMaps["Enter"] = "newlineAndIndentContinueMarkdownList";
    this.codemirror = CodeMirror.fromTextArea(el, {
      mode: 'markdown',
      theme: 'paper',
      indentWithTabs: true,
      lineNumbers: false,
      extraKeys: keyMaps
    });
    if (options.toolbar !== false) {
      this.createToolbar();
    }
    if (options.status !== false) {
      this.createStatusbar();
    }
    this._rendered = this.element;
    if (this.previewTarget) {
      $preview = $(this.previewTarget);
      return this.codemirror.on('update', (function(_this) {
        return function() {
          return $preview.html(marked(_this.codemirror.getValue()));
        };
      })(this));
    }
  };

  Mdex.prototype.createToolbar = function(items) {
    var bar, cm, cmWrapper, i, item, _fn, _i, _len;
    items = items != null ? items : this.options.toolbar;
    if (!items || items.length === 0) {
      return;
    }
    bar = document.createElement('div');
    bar.className = 'editor-toolbar';
    this.toolbar = {};
    _fn = (function(_this) {
      return function(item) {
        var el, _ref;
        el = item.name ? createIcon(item.name, item) : item === '|' ? createSep() : createIcon(item);
        if (item.action) {
          if ((typeof item.action) === 'function') {
            el.onclick = function(e) {
              return item.action(_this);
            };
          } else if ((typeof item.action) === 'string') {
            el.href = item.action;
            el.target = '_blank';
          }
        }
        _this.toolbar[(_ref = item.name) != null ? _ref : item] = el;
        return bar.appendChild(el);
      };
    })(this);
    for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
      item = items[i];
      _fn(item);
    }
    cm = this.codemirror;
    cm.on('cursorActivity', (function(_this) {
      return function() {
        var key, stat, _j, _len1, _ref, _results;
        stat = getState(cm);
        _ref = _this.toolbar;
        _results = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          key = _ref[_j];
          _results.push((function(key) {
            var el;
            el = _this.toolbar[key];
            if (stat[key]) {
              return el.className += ' active';
            } else {
              return el.className = el.className.replace(/\s*active\s*/g, '');
            }
          })(key));
        }
        return _results;
      };
    })(this));
    cmWrapper = cm.getWrapperElement();
    cmWrapper.parentNode.insertBefore(bar, cmWrapper);
    return bar;
  };

  Mdex.prototype.createStatusbar = function(status) {
    var bar, cm, cmWrapper, i, name, pos, _fn, _i, _len;
    status = status || this.options.status;
    if (!status || status.length === 0) {
      return;
    }
    bar = document.createElement('div');
    bar.className = 'editor-statusbar';
    pos = null;
    cm = this.codemirror;
    _fn = (function(_this) {
      return function(name) {
        var el;
        el = document.createElement('span');
        el.className = name;
        if (name === 'words') {
          el.innerHTML = '0';
          cm.on('update', function() {
            return el.innerHTML = wordCount(cm.getValue());
          });
        } else if (name === 'lines') {
          console.log;
          el.innerHTML = '0';
          cm.on('update', function() {
            return el.innerHTML = cm.lineCount();
          });
        } else if (name === 'cursor') {
          el.innerHTML = '0:0';
          cm.on('cursorActivity', function() {
            pos = cm.getCursor();
            return el.innerHTML = pos.line + ':' + pos.ch;
          });
        }
        return bar.appendChild(el);
      };
    })(this);
    for (i = _i = 0, _len = status.length; _i < _len; i = ++_i) {
      name = status[i];
      _fn(name);
    }
    cmWrapper = this.codemirror.getWrapperElement();
    cmWrapper.parentNode.insertBefore(bar, cmWrapper.nextSibling);
    return bar;
  };

  Mdex.prototype.toggleBlockquote = function() {
    return toggleBlockquote(this);
  };

  Mdex.prototype.toggleUnOrderedList = function() {
    return toggleUnOrderedList(this);
  };

  Mdex.prototype.toggleOrderedList = function() {
    return toggleOrderedList(this);
  };

  Mdex.prototype.drawLink = function() {
    return drawLink(this);
  };

  Mdex.prototype.drawImage = function() {
    return drawImage(this);
  };

  Mdex.prototype.undo = function() {
    return undo(this);
  };

  Mdex.prototype.redo = function() {
    return redo(this);
  };

  toggleFullScreen = function() {
    return toggleFullScreen(this);
  };

  return Mdex;

})();

Mdex.toolbar = [
  {
    name: 'bold',
    action: toggleBold
  }, {
    name: 'italic',
    action: toggleItalic
  }, '|', {
    name: 'quote',
    action: toggleBlockquote
  }, {
    name: 'unordered-list',
    action: toggleUnOrderedList
  }, {
    name: 'ordered-list',
    action: toggleOrderedList
  }, '|', {
    name: 'link',
    action: drawLink
  }, {
    name: 'image',
    action: drawImage
  }, '|', {
    name: 'info',
    action: 'http:#lab.lepture.com/editor/markdown'
  }, {
    name: 'preview',
    action: togglePreview
  }, {
    name: 'fullscreen',
    action: toggleFullScreen
  }
];

window.Mdex = Mdex;


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvVXNlcnMvbWl6Y2hpL3Byb2ovbGVwdHVyZS1lZGl0b3Ivbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwiL1VzZXJzL21pemNoaS9wcm9qL2xlcHR1cmUtZWRpdG9yL3NyYy9tZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLElBQUEscVFBQUE7RUFBQSxrRkFBQTs7QUFBQSxLQUFBLEdBQVEsS0FBSyxDQUFDLElBQU4sQ0FBVyxTQUFTLENBQUMsUUFBckIsQ0FBUixDQUFBOztBQUFBLFNBRUEsR0FDRTtBQUFBLEVBQUEsT0FBQSxFQUFTLFVBQVQ7QUFBQSxFQUNBLE9BQUEsRUFBUyxZQURUO0FBQUEsRUFFQSxPQUFBLEVBQVMsUUFGVDtBQUFBLEVBR0EsV0FBQSxFQUFhLFNBSGI7QUFBQSxFQUlBLE9BQUEsRUFBUyxnQkFKVDtBQUFBLEVBS0EsV0FBQSxFQUFhLGlCQUxiO0FBQUEsRUFNQSxPQUFBLEVBQVMsbUJBTlQ7Q0FIRixDQUFBOztBQUFBLFdBV0EsR0FBYyxTQUFDLElBQUQsR0FBQTtBQUNaLEVBQUEsSUFBRyxLQUFIO0FBQ0UsSUFBQSxJQUFBLEdBQU8sSUFBSSxDQUFDLE9BQUwsQ0FBYSxNQUFiLEVBQXFCLEtBQXJCLENBQVAsQ0FERjtHQUFBLE1BQUE7QUFHRSxJQUFBLElBQUEsR0FBTyxJQUFJLENBQUMsT0FBTCxDQUFhLEtBQWIsRUFBb0IsTUFBcEIsQ0FBUCxDQUhGO0dBQUE7QUFJQSxTQUFPLElBQVAsQ0FMWTtBQUFBLENBWGQsQ0FBQTs7QUFBQSxVQWtCQSxHQUFhLFNBQUMsSUFBRCxFQUFPLE9BQVAsR0FBQTtBQUNYLE1BQUEsWUFBQTtBQUFBLEVBQUEsT0FBQSxHQUFVLE9BQUEsSUFBVyxFQUFyQixDQUFBO0FBQUEsRUFDQSxFQUFBLEdBQUss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ZSxNQUFBLEVBQVEsVUFBdkI7R0FEYSxFQUViO0FBQUEsSUFBQyxJQUFBLEVBQU0sUUFBUDtBQUFBLElBQWlCLE1BQUEsRUFBUSxZQUF6QjtHQUZhLEVBR2IsR0FIYSxFQUliO0FBQUEsSUFBQyxJQUFBLEVBQU0sT0FBUDtBQUFBLElBQWdCLE1BQUEsRUFBUSxnQkFBeEI7R0FKYSxFQUtiO0FBQUEsSUFBQyxJQUFBLEVBQU0sZ0JBQVA7QUFBQSxJQUF5QixNQUFBLEVBQVEsbUJBQWpDO0dBTGEsRUFNYjtBQUFBLElBQUMsSUFBQSxFQUFNLGNBQVA7QUFBQSxJQUF1QixNQUFBLEVBQVEsaUJBQS9CO0dBTmEsRUFPYixHQVBhLEVBUWI7QUFBQSxJQUFDLElBQUEsRUFBTSxNQUFQO0FBQUEsSUFBZSxNQUFBLEVBQVEsUUFBdkI7R0FSYSxFQVNiO0FBQUEsSUFBQyxJQUFBLEVBQU0sT0FBUDtBQUFBLElBQWdCLE1BQUEsRUFBUSxTQUF4QjtHQVRhLEVBVWIsR0FWYSxFQVdiO0FBQUEsSUFBQyxJQUFBLEVBQU0sTUFBUDtBQUFBLElBQWUsTUFBQSxFQUFRLHVDQUF2QjtHQVhhLEVBWWI7QUFBQSxJQUFDLElBQUEsRUFBTSxTQUFQO0FBQUEsSUFBa0IsTUFBQSxFQUFRLGFBQTFCO0dBWmEsRUFhYjtBQUFBLElBQUMsSUFBQSxFQUFNLFlBQVA7QUFBQSxJQUFxQixNQUFBLEVBQVEsZ0JBQTdCO0dBYmE7Q0EzYmYsQ0FBQTs7QUFBQSxNQTJjTSxDQUFDLElBQVAsR0FBYyxJQTNjZCxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpc01hYyA9IC9NYWMvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKVxuXG5zaG9ydGN1dHMgPVxuICAnQ21kLUInOiB0b2dnbGVCb2xkLFxuICAnQ21kLUknOiB0b2dnbGVJdGFsaWMsXG4gICdDbWQtSyc6IGRyYXdMaW5rLFxuICAnQ21kLUFsdC1JJzogZHJhd0ltYWdlLFxuICBcIkNtZC0nXCI6IHRvZ2dsZUJsb2NrcXVvdGUsXG4gICdDbWQtQWx0LUwnOiB0b2dnbGVPcmRlcmVkTGlzdCxcbiAgJ0NtZC1MJzogdG9nZ2xlVW5PcmRlcmVkTGlzdFxuXG5maXhTaG9ydGN1dCA9IChuYW1lKSAtPlxuICBpZiBpc01hY1xuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoJ0N0cmwnLCAnQ21kJylcbiAgZWxzZVxuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoJ0NtZCcsICdDdHJsJylcbiAgcmV0dXJuIG5hbWVcblxuY3JlYXRlSWNvbiA9IChuYW1lLCBvcHRpb25zKSAtPlxuICBvcHRpb25zID0gb3B0aW9ucyBvciB7fVxuICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKVxuXG4gIHNob3J0Y3V0ID0gb3B0aW9ucy5zaG9ydGN1dCBvciBzaG9ydGN1dHNbbmFtZV1cbiAgaWYgc2hvcnRjdXRcbiAgICBzaG9ydGN1dCA9IGZpeFNob3J0Y3V0KHNob3J0Y3V0KVxuICAgIGVsLnRpdGxlID0gc2hvcnRjdXRcbiAgICBlbC50aXRsZSA9IGVsLnRpdGxlLnJlcGxhY2UoJ0NtZCcsICfijJgnKVxuICAgIGlmIGlzTWFjXG4gICAgICBlbC50aXRsZSA9IGVsLnRpdGxlLnJlcGxhY2UoJ0FsdCcsICfijKUnKVxuXG4gIGVsLmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3NOYW1lIG9yICdpY29uLScgKyBuYW1lXG4gIHJldHVybiBlbFxuXG5jcmVhdGVTZXAgPSAtPlxuICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKVxuICBlbC5jbGFzc05hbWUgPSAnc2VwYXJhdG9yJ1xuICBlbC5pbm5lckhUTUwgPSAnfCdcbiAgcmV0dXJuIGVsXG5cbmdldFN0YXRlID0gKGNtLCBwb3MpIC0+XG4gIHBvcyA9IHBvcyBvciBjbS5nZXRDdXJzb3IoJ3N0YXJ0JylcbiAgc3RhdCA9IGNtLmdldFRva2VuQXQocG9zKVxuICBpZiAhc3RhdC50eXBlIHRoZW4gcmV0dXJuIHt9XG5cbiAgdHlwZXMgPSBzdGF0LnR5cGUuc3BsaXQoJyAnKVxuXG4gIHJldCA9IHt9XG4gIGRhdGEgPSBudWxsXG4gIHRleHQgPSBudWxsXG4gIGZvciBkYXRhLCBpIGluIHR5cGVzXG4gICAgaWYgZGF0YSBpcyAnc3Ryb25nJ1xuICAgICAgcmV0LmJvbGQgPSB0cnVlXG4gICAgZWxzZSBpZiBkYXRhIGlzICd2YXJpYWJsZS0yJ1xuICAgICAgdGV4dCA9IGNtLmdldExpbmUocG9zLmxpbmUpXG4gICAgICBpZiAvXlxccypcXGQrXFwuXFxzLy50ZXN0KHRleHQpXG4gICAgICAgIHJldFsnb3JkZXJlZC1saXN0J10gPSB0cnVlXG4gICAgICBlbHNlXG4gICAgICAgIHJldFsndW5vcmRlcmVkLWxpc3QnXSA9IHRydWVcbiAgICBlbHNlIGlmIGRhdGEgaXMgJ2F0b20nXG4gICAgICByZXQucXVvdGUgPSB0cnVlXG4gICAgZWxzZSBpZiBkYXRhIGlzICdlbSdcbiAgICAgIHJldC5pdGFsaWMgPSB0cnVlXG4gIHJldHVybiByZXRcblxudG9nZ2xlRnVsbFNjcmVlbiA9IChlZGl0b3IpIC0+XG4gIGVsID0gZWRpdG9yLmNvZGVtaXJyb3IuZ2V0V3JhcHBlckVsZW1lbnQoKVxuICBkb2MgPSBkb2N1bWVudFxuICBpc0Z1bGwgPSBkb2MuZnVsbFNjcmVlbiBvciBkb2MubW96RnVsbFNjcmVlbiBvciBkb2Mud2Via2l0RnVsbFNjcmVlblxuICByZXF1ZXN0ID0gLT5cbiAgICBpZiBlbC5yZXF1ZXN0RnVsbFNjcmVlblxuICAgICAgZWwucmVxdWVzdEZ1bGxTY3JlZW4oKVxuICAgIGVsc2UgaWYgZWwubW96UmVxdWVzdEZ1bGxTY3JlZW5cbiAgICAgIGVsLm1velJlcXVlc3RGdWxsU2NyZWVuKClcbiAgICBlbHNlIGlmIGVsLndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuXG4gICAgICBlbC53ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbihFbGVtZW50LkFMTE9XX0tFWUJPQVJEX0lOUFVUKVxuXG4gIGNhbmNlbCA9IC0+XG4gICAgaWYgZG9jLmNhbmNlbEZ1bGxTY3JlZW5cbiAgICAgIGRvYy5jYW5jZWxGdWxsU2NyZWVuKClcbiAgICBlbHNlIGlmIGRvYy5tb3pDYW5jZWxGdWxsU2NyZWVuXG4gICAgICBkb2MubW96Q2FuY2VsRnVsbFNjcmVlbigpXG4gICAgZWxzZSBpZiBkb2Mud2Via2l0Q2FuY2VsRnVsbFNjcmVlblxuICAgICAgZG9jLndlYmtpdENhbmNlbEZ1bGxTY3JlZW4oKVxuXG4gIGlmICFpc0Z1bGxcbiAgICByZXF1ZXN0KClcbiAgZWxzZSBpZiAoY2FuY2VsKVxuICAgIGNhbmNlbCgpXG5cbnRvZ2dsZUJvbGQgPSAoZWRpdG9yKSAtPlxuICBjbSA9IGVkaXRvci5jb2RlbWlycm9yXG4gIHN0YXQgPSBnZXRTdGF0ZShjbSlcblxuICB0ZXh0ID0gbnVsbFxuICBzdGFydCA9ICcqKidcbiAgZW5kID0gJyoqJ1xuXG4gIHN0YXJ0UG9pbnQgPSBjbS5nZXRDdXJzb3IoJ3N0YXJ0JylcbiAgZW5kUG9pbnQgPSBjbS5nZXRDdXJzb3IoJ2VuZCcpXG4gIGlmIHN0YXQuYm9sZFxuICAgIHRleHQgPSBjbS5nZXRMaW5lKHN0YXJ0UG9pbnQubGluZSlcbiAgICBzdGFydCA9IHRleHQuc2xpY2UoMCwgc3RhcnRQb2ludC5jaClcbiAgICBlbmQgPSB0ZXh0LnNsaWNlKHN0YXJ0UG9pbnQuY2gpXG5cbiAgICBzdGFydCA9IHN0YXJ0LnJlcGxhY2UoL14oLiopPyhcXCp8XFxfKXsyfShcXFMrLiopPyQvLCAnJDEkMycpXG4gICAgZW5kID0gZW5kLnJlcGxhY2UoL14oLipcXFMrKT8oXFwqfFxcXyl7Mn0oXFxzKy4qKT8kLywgJyQxJDMnKVxuICAgIHN0YXJ0UG9pbnQuY2ggLT0gMlxuICAgIGVuZFBvaW50LmNoICs9IDJcbiAgICBjbS5yZXBsYWNlUmFuZ2UoZW5kLCBzdGFydFBvaW50LCBlbmRQb2ludClcbiAgZWxzZVxuICAgIHRleHQgPSBjbS5nZXRTZWxlY3Rpb24oKVxuICAgIGNtLnJlcGxhY2VTZWxlY3Rpb24oc3RhcnQgKyB0ZXh0ICsgZW5kKVxuXG4gICAgc3RhcnRQb2ludC5jaCArPSAyXG4gICAgZW5kUG9pbnQuY2ggKz0gMlxuICBjbS5zZXRTZWxlY3Rpb24oc3RhcnRQb2ludCwgZW5kUG9pbnQpXG4gIGNtLmZvY3VzKClcblxuXG50b2dnbGVJdGFsaWMgPSAoZWRpdG9yKSAtPlxuICBjbSA9IGVkaXRvci5jb2RlbWlycm9yXG4gIHN0YXQgPSBnZXRTdGF0ZShjbSlcblxuICB0ZXh0ID0gbnVsbFxuICBzdGFydCA9ICcqJ1xuICBlbmQgPSAnKidcblxuICBzdGFydFBvaW50ID0gY20uZ2V0Q3Vyc29yKCdzdGFydCcpXG4gIGVuZFBvaW50ID0gY20uZ2V0Q3Vyc29yKCdlbmQnKVxuICBpZiBzdGF0Lml0YWxpY1xuICAgIHRleHQgPSBjbS5nZXRMaW5lKHN0YXJ0UG9pbnQubGluZSlcbiAgICBzdGFydCA9IHRleHQuc2xpY2UoMCwgc3RhcnRQb2ludC5jaClcbiAgICBlbmQgPSB0ZXh0LnNsaWNlKHN0YXJ0UG9pbnQuY2gpXG5cbiAgICBzdGFydCA9IHN0YXJ0LnJlcGxhY2UoL14oLiopPyhcXCp8XFxfKShcXFMrLiopPyQvLCAnJDEkMycpXG4gICAgZW5kID0gZW5kLnJlcGxhY2UoL14oLipcXFMrKT8oXFwqfFxcXykoXFxzKy4qKT8kLywgJyQxJDMnKVxuICAgIHN0YXJ0UG9pbnQuY2ggLT0gMVxuICAgIGVuZFBvaW50LmNoICs9IDFcbiAgICBjbS5yZXBsYWNlUmFuZ2UoZW5kLCBzdGFydFBvaW50LCBlbmRQb2ludClcbiAgZWxzZVxuICAgIHRleHQgPSBjbS5nZXRTZWxlY3Rpb24oKVxuICAgIGNtLnJlcGxhY2VTZWxlY3Rpb24oc3RhcnQgKyB0ZXh0ICsgZW5kKVxuXG4gICAgc3RhcnRQb2ludC5jaCArPSAxXG4gICAgZW5kUG9pbnQuY2ggKz0gMVxuICBjbS5zZXRTZWxlY3Rpb24oc3RhcnRQb2ludCwgZW5kUG9pbnQpXG4gIGNtLmZvY3VzKClcblxudG9nZ2xlQmxvY2txdW90ZSA9IChlZGl0b3IpIC0+XG4gIGNtID0gZWRpdG9yLmNvZGVtaXJyb3JcbiAgX3RvZ2dsZUxpbmUoY20sICdxdW90ZScpXG5cblxudG9nZ2xlVW5PcmRlcmVkTGlzdCA9IChlZGl0b3IpIC0+XG4gIGNtID0gZWRpdG9yLmNvZGVtaXJyb3JcbiAgX3RvZ2dsZUxpbmUoY20sICd1bm9yZGVyZWQtbGlzdCcpXG5cblxudG9nZ2xlT3JkZXJlZExpc3QgPSAoZWRpdG9yKSAtPlxuICBjbSA9IGVkaXRvci5jb2RlbWlycm9yXG4gIF90b2dnbGVMaW5lKGNtLCAnb3JkZXJlZC1saXN0JylcblxuXG5kcmF3TGluayA9IChlZGl0b3IpIC0+XG4gIGNtID0gZWRpdG9yLmNvZGVtaXJyb3JcbiAgc3RhdCA9IGdldFN0YXRlKGNtKVxuICBfcmVwbGFjZVNlbGVjdGlvbihjbSwgc3RhdC5saW5rLCAnWycsICddKGh0dHA6IyknKVxuXG5kcmF3SW1hZ2UgPSAoZWRpdG9yKSAtPlxuICBjbSA9IGVkaXRvci5jb2RlbWlycm9yXG4gIHN0YXQgPSBnZXRTdGF0ZShjbSlcbiAgX3JlcGxhY2VTZWxlY3Rpb24oY20sIHN0YXQuaW1hZ2UsICchWycsICddKGh0dHA6IyknKVxuXG51bmRvID0gKGVkaXRvcikgLT5cbiAgY20gPSBlZGl0b3IuY29kZW1pcnJvclxuICBjbS51bmRvKClcbiAgY20uZm9jdXMoKVxuXG5yZWRvID0gKGVkaXRvcikgLT5cbiAgY20gPSBlZGl0b3IuY29kZW1pcnJvclxuICBjbS5yZWRvKClcbiAgY20uZm9jdXMoKVxuXG50b2dnbGVQcmV2aWV3ID0gKGVkaXRvcikgLT5cbiAgdG9vbGJhciA9IGVkaXRvci50b29sYmFyLnByZXZpZXdcbiAgcGFyc2UgPSBlZGl0b3IuY29uc3RydWN0b3IubWFya2Rvd25cbiAgY20gPSBlZGl0b3IuY29kZW1pcnJvclxuICB3cmFwcGVyID0gY20uZ2V0V3JhcHBlckVsZW1lbnQoKVxuICBwcmV2aWV3ID0gd3JhcHBlci5sYXN0Q2hpbGRcbiAgaWYgIS9lZGl0b3ItcHJldmlldy8udGVzdChwcmV2aWV3LmNsYXNzTmFtZSlcbiAgICBwcmV2aWV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBwcmV2aWV3LmNsYXNzTmFtZSA9ICdlZGl0b3ItcHJldmlldydcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHByZXZpZXcpXG4gIGlmIC9lZGl0b3ItcHJldmlldy1hY3RpdmUvLnRlc3QocHJldmlldy5jbGFzc05hbWUpXG4gICAgcHJldmlldy5jbGFzc05hbWUgPSBwcmV2aWV3LmNsYXNzTmFtZS5yZXBsYWNlKFxuICAgICAgL1xccyplZGl0b3ItcHJldmlldy1hY3RpdmVcXHMqL2csICcnXG4gICAgKVxuICAgIHRvb2xiYXIuY2xhc3NOYW1lID0gdG9vbGJhci5jbGFzc05hbWUucmVwbGFjZSgvXFxzKmFjdGl2ZVxccyovZywgJycpXG4gIGVsc2VcbiAgICBzZXRUaW1lb3V0KCgtPiBwcmV2aWV3LmNsYXNzTmFtZSArPSAnIGVkaXRvci1wcmV2aWV3LWFjdGl2ZScpLCAxKVxuICAgIHRvb2xiYXIuY2xhc3NOYW1lICs9ICcgYWN0aXZlJ1xuICB0ZXh0ID0gY20uZ2V0VmFsdWUoKVxuICBwcmV2aWV3LmlubmVySFRNTCA9IHBhcnNlKHRleHQpXG5cbl9yZXBsYWNlU2VsZWN0aW9uID0gKGNtLCBhY3RpdmUsIHN0YXJ0LCBlbmQpIC0+XG4gIHRleHQgPSBudWxsXG4gIHN0YXJ0UG9pbnQgPSBjbS5nZXRDdXJzb3IoJ3N0YXJ0JylcbiAgZW5kUG9pbnQgPSBjbS5nZXRDdXJzb3IoJ2VuZCcpXG4gIGlmIGFjdGl2ZVxuICAgIHRleHQgPSBjbS5nZXRMaW5lKHN0YXJ0UG9pbnQubGluZSlcbiAgICBzdGFydCA9IHRleHQuc2xpY2UoMCwgc3RhcnRQb2ludC5jaClcbiAgICBlbmQgPSB0ZXh0LnNsaWNlKHN0YXJ0UG9pbnQuY2gpXG4gICAgY20uc2V0TGluZShzdGFydFBvaW50LmxpbmUsIHN0YXJ0ICsgZW5kKVxuICBlbHNlXG4gICAgdGV4dCA9IGNtLmdldFNlbGVjdGlvbigpXG4gICAgY20ucmVwbGFjZVNlbGVjdGlvbihzdGFydCArIHRleHQgKyBlbmQpXG5cbiAgICBzdGFydFBvaW50LmNoICs9IHN0YXJ0Lmxlbmd0aFxuICAgIGVuZFBvaW50LmNoICs9IHN0YXJ0Lmxlbmd0aFxuXG4gIGNtLnNldFNlbGVjdGlvbihzdGFydFBvaW50LCBlbmRQb2ludClcbiAgY20uZm9jdXMoKVxuXG5fdG9nZ2xlTGluZSA9IChjbSwgbmFtZSkgLT5cbiAgc3RhdCA9IGdldFN0YXRlKGNtKVxuICBzdGFydFBvaW50ID0gY20uZ2V0Q3Vyc29yKCdzdGFydCcpXG4gIGVuZFBvaW50ID0gY20uZ2V0Q3Vyc29yKCdlbmQnKVxuICByZXBsID1cbiAgICBxdW90ZTogL14oXFxzKilcXD5cXHMrLyxcbiAgICAndW5vcmRlcmVkLWxpc3QnOiAvXihcXHMqKShcXCp8XFwtfFxcKylcXHMrLyxcbiAgICAnb3JkZXJlZC1saXN0JzogL14oXFxzKilcXGQrXFwuXFxzKy9cbiAgbWFwID1cbiAgICBxdW90ZTogJz4gJyxcbiAgICAndW5vcmRlcmVkLWxpc3QnOiAnKiAnLFxuICAgICdvcmRlcmVkLWxpc3QnOiAnMS4gJ1xuICBmb3IgaSBpbiBbc3RhcnRQb2ludC5saW5lLi5lbmRQb2ludC5saW5lXVxuICAgIGRvIChpKSA9PlxuICAgICAgdGV4dCA9IGNtLmdldExpbmUoaSlcbiAgICAgIGlmIChzdGF0W25hbWVdKVxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHJlcGxbbmFtZV0sICckMScpXG4gICAgICBlbHNlXG4gICAgICAgIHRleHQgPSBtYXBbbmFtZV0gKyB0ZXh0XG4gICAgICBjbS5zZXRMaW5lKGksIHRleHQpXG4gIGNtLmZvY3VzKClcblxuXG53b3JkQ291bnQgPSAoZGF0YSkgLT5cbiAgcGF0dGVybiA9IC9bYS16QS1aMC05X1xcdTAzOTItXFx1MDNjOV0rfFtcXHU0RTAwLVxcdTlGRkZcXHUzNDAwLVxcdTRkYmZcXHVmOTAwLVxcdWZhZmZcXHUzMDQwLVxcdTMwOWZcXHVhYzAwLVxcdWQ3YWZdKy9nXG4gIG0gPSBkYXRhLm1hdGNoKHBhdHRlcm4pXG4gIGNvdW50ID0gMFxuICBpZiBtIGlzIG51bGwgdGhlbiByZXR1cm4gY291bnRcbiAgZm9yIGkgaW4gWzAuLi5tLmxlbmd0aF1cbiAgICBpZiBtW2ldLmNoYXJDb2RlQXQoMCkgPj0gMHg0RTAwXG4gICAgICBjb3VudCArPSBtW2ldLmxlbmd0aFxuICAgIGVsc2VcbiAgICAgIGNvdW50ICs9IDFcbiAgcmV0dXJuIGNvdW50XG5cbmNsYXNzIE1kZXhcbiAgQG1hcmtkb3duOiAodGV4dCkgLT4gbWFya2VkKHRleHQpXG5cbiAgQHRvZ2dsZUJvbGQ6IHRvZ2dsZUJvbGRcblxuICBAdG9nZ2xlSXRhbGljOiB0b2dnbGVJdGFsaWNcblxuICBAdG9nZ2xlQmxvY2txdW90ZTogdG9nZ2xlQmxvY2txdW90ZVxuXG4gIEB0b2dnbGVVbk9yZGVyZWRMaXN0OiB0b2dnbGVVbk9yZGVyZWRMaXN0XG5cbiAgQHRvZ2dsZU9yZGVyZWRMaXN0OiB0b2dnbGVPcmRlcmVkTGlzdFxuXG4gIEBkcmF3TGluazogZHJhd0xpbmtcblxuICBAZHJhd0ltYWdlOiBkcmF3SW1hZ2VcblxuICBAdW5kbzogdW5kb1xuXG4gIEByZWRvOiByZWRvXG5cbiAgQHRvZ2dsZUZ1bGxTY3JlZW46IHRvZ2dsZUZ1bGxTY3JlZW5cblxuICB0b2dnbGVCb2xkOiA9PiB0b2dnbGVCb2xkKHRoaXMpXG5cbiAgdG9nZ2xlSXRhbGljOiA9PiB0b2dnbGVJdGFsaWModGhpcylcblxuICBjb25zdHJ1Y3RvcjogKG9wdGlvbnMgPSB7fSkgLT5cbiAgICBpZiBvcHRpb25zLmVsZW1lbnRcbiAgICAgIEBlbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50XG5cbiAgICBpZiBvcHRpb25zLnByZXZpZXdUYXJnZXRcbiAgICAgIEBwcmV2aWV3VGFyZ2V0ID0gb3B0aW9ucy5wcmV2aWV3VGFyZ2V0XG5cbiAgICBpZiBvcHRpb25zLmVkaXRvclRhcmdldFxuICAgICAgQGVkaXRvclRhcmdldCA9IG9wdGlvbnMuZWRpdG9yVGFyZ2V0XG5cbiAgICBvcHRpb25zLnRvb2xiYXIgPSBvcHRpb25zLnRvb2xiYXIgPyBNZGV4LnRvb2xiYXJcbiAgICAjIHlvdSBjYW4gY3VzdG9taXplIHRvb2xiYXIgd2l0aCBvYmplY3RcbiAgICAjIFt7bmFtZTogJ2JvbGQnLCBzaG9ydGN1dDogJ0N0cmwtQicsIGNsYXNzTmFtZTogJ2ljb24tYm9sZCd9XVxuXG4gICAgdW5sZXNzIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3N0YXR1cycpXG4gICAgICBvcHRpb25zLnN0YXR1cyA9IFsnbGluZXMnLCAnd29yZHMnLCAnY3Vyc29yJ11cblxuICAgIEBvcHRpb25zID0gb3B0aW9uc1xuXG4gICAgIyBJZiB1c2VyIGhhcyBwYXNzZWQgYW4gZWxlbWVudCwgaXQgc2hvdWxkIGF1dG8gcmVuZGVyZWRcbiAgICBpZiBAZWxlbWVudCB0aGVuIEByZW5kZXIoKVxuXG4gIHJlbmRlcjogKGVsKSAtPlxuICAgIHVubGVzcyBlbFxuICAgICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKEBlZGl0b3JUYXJnZXQpXG5cbiAgICBpZiBAX3JlbmRlcmVkIGFuZCBAX3JlbmRlcmVkIGlzIGVsXG4gICAgICAjIEFscmVhZHkgcmVuZGVyZWQuXG4gICAgICByZXR1cm5cblxuICAgIEBlbGVtZW50ID0gZWxcbiAgICBvcHRpb25zID0gQG9wdGlvbnNcblxuICAgIGtleU1hcHMgPSB7fVxuICAgIGZvciBrZXkgaW4gc2hvcnRjdXRzXG4gICAgICBkbyAoa2V5KSA9PlxuICAgICAgICBrZXlNYXBzW2ZpeFNob3J0Y3V0KGtleSldID0gKGNtKSA9PlxuICAgICAgICAgIHNob3J0Y3V0c1trZXldKEApXG5cbiAgICBrZXlNYXBzW1wiRW50ZXJcIl0gPSBcIm5ld2xpbmVBbmRJbmRlbnRDb250aW51ZU1hcmtkb3duTGlzdFwiXG5cbiAgICBAY29kZW1pcnJvciA9IENvZGVNaXJyb3IuZnJvbVRleHRBcmVhIGVsLFxuICAgICAgbW9kZTogJ21hcmtkb3duJ1xuICAgICAgdGhlbWU6ICdwYXBlcidcbiAgICAgIGluZGVudFdpdGhUYWJzOiB0cnVlXG4gICAgICBsaW5lTnVtYmVyczogZmFsc2VcbiAgICAgIGV4dHJhS2V5czoga2V5TWFwc1xuXG4gICAgaWYgb3B0aW9ucy50b29sYmFyIGlzbnQgZmFsc2VcbiAgICAgIEBjcmVhdGVUb29sYmFyKClcblxuICAgIGlmIG9wdGlvbnMuc3RhdHVzIGlzbnQgZmFsc2VcbiAgICAgIEBjcmVhdGVTdGF0dXNiYXIoKVxuXG4gICAgQF9yZW5kZXJlZCA9IEBlbGVtZW50XG5cbiAgICBpZiBAcHJldmlld1RhcmdldFxuICAgICAgJHByZXZpZXcgPSAkKEBwcmV2aWV3VGFyZ2V0KVxuICAgICAgQGNvZGVtaXJyb3Iub24gJ3VwZGF0ZScsID0+XG4gICAgICAgICRwcmV2aWV3Lmh0bWwobWFya2VkKEBjb2RlbWlycm9yLmdldFZhbHVlKCkpKVxuXG4gIGNyZWF0ZVRvb2xiYXI6IChpdGVtcykgLT5cbiAgICBpdGVtcyA9IGl0ZW1zID8gQG9wdGlvbnMudG9vbGJhclxuXG4gICAgcmV0dXJuIGlmIG5vdCBpdGVtcyBvciBpdGVtcy5sZW5ndGggaXMgMFxuXG4gICAgYmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBiYXIuY2xhc3NOYW1lID0gJ2VkaXRvci10b29sYmFyJ1xuXG4gICAgQHRvb2xiYXIgPSB7fVxuXG4gICAgZm9yIGl0ZW0sIGkgaW4gaXRlbXMgdGhlbiBkbyAoaXRlbSkgPT5cbiAgICAgIGVsID1cbiAgICAgICAgaWYgaXRlbS5uYW1lXG4gICAgICAgICAgY3JlYXRlSWNvbihpdGVtLm5hbWUsIGl0ZW0pXG4gICAgICAgIGVsc2UgaWYgaXRlbSBpcyAnfCdcbiAgICAgICAgICBjcmVhdGVTZXAoKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgY3JlYXRlSWNvbihpdGVtKVxuXG4gICAgICBpZiBpdGVtLmFjdGlvblxuICAgICAgICBpZiAodHlwZW9mIGl0ZW0uYWN0aW9uKSBpcyAnZnVuY3Rpb24nXG4gICAgICAgICAgZWwub25jbGljayA9IChlKSA9PlxuICAgICAgICAgICAgaXRlbS5hY3Rpb24oQClcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGl0ZW0uYWN0aW9uKSBpcyAnc3RyaW5nJ1xuICAgICAgICAgIGVsLmhyZWYgPSBpdGVtLmFjdGlvblxuICAgICAgICAgIGVsLnRhcmdldCA9ICdfYmxhbmsnXG5cbiAgICAgIEB0b29sYmFyW2l0ZW0ubmFtZSA/IGl0ZW1dID0gZWxcbiAgICAgIGJhci5hcHBlbmRDaGlsZChlbClcblxuICAgIGNtID0gQGNvZGVtaXJyb3JcbiAgICBjbS5vbiAnY3Vyc29yQWN0aXZpdHknLCA9PlxuICAgICAgc3RhdCA9IGdldFN0YXRlKGNtKVxuICAgICAgZm9yIGtleSBpbiBAdG9vbGJhclxuICAgICAgICBkbyAoa2V5KSA9PlxuICAgICAgICAgIGVsID0gQHRvb2xiYXJba2V5XVxuICAgICAgICAgIGlmIHN0YXRba2V5XVxuICAgICAgICAgICAgZWwuY2xhc3NOYW1lICs9ICcgYWN0aXZlJ1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5yZXBsYWNlKC9cXHMqYWN0aXZlXFxzKi9nLCAnJylcblxuICAgIGNtV3JhcHBlciA9IGNtLmdldFdyYXBwZXJFbGVtZW50KClcbiAgICBjbVdyYXBwZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYmFyLCBjbVdyYXBwZXIpXG4gICAgcmV0dXJuIGJhclxuXG4gIGNyZWF0ZVN0YXR1c2JhcjogKHN0YXR1cykgLT5cbiAgICBzdGF0dXMgPSBzdGF0dXMgb3IgdGhpcy5vcHRpb25zLnN0YXR1c1xuXG4gICAgcmV0dXJuIGlmIG5vdCBzdGF0dXMgb3Igc3RhdHVzLmxlbmd0aCBpcyAwXG5cbiAgICBiYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGJhci5jbGFzc05hbWUgPSAnZWRpdG9yLXN0YXR1c2JhcidcblxuICAgIHBvcyA9IG51bGxcbiAgICBjbSA9IEBjb2RlbWlycm9yXG5cbiAgICBmb3IgbmFtZSwgaSBpbiBzdGF0dXMgdGhlbiBkbyAobmFtZSkgPT5cbiAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG4gICAgICBlbC5jbGFzc05hbWUgPSBuYW1lXG4gICAgICBpZiBuYW1lIGlzICd3b3JkcydcbiAgICAgICAgZWwuaW5uZXJIVE1MID0gJzAnXG4gICAgICAgIGNtLm9uICd1cGRhdGUnLCA9PlxuICAgICAgICAgIGVsLmlubmVySFRNTCA9IHdvcmRDb3VudChjbS5nZXRWYWx1ZSgpKVxuXG4gICAgICBlbHNlIGlmIG5hbWUgaXMgJ2xpbmVzJ1xuICAgICAgICBjb25zb2xlLmxvZ1xuICAgICAgICBlbC5pbm5lckhUTUwgPSAnMCdcbiAgICAgICAgY20ub24gJ3VwZGF0ZScsID0+XG4gICAgICAgICAgZWwuaW5uZXJIVE1MID0gY20ubGluZUNvdW50KClcblxuICAgICAgZWxzZSBpZiBuYW1lIGlzICdjdXJzb3InXG4gICAgICAgIGVsLmlubmVySFRNTCA9ICcwOjAnXG4gICAgICAgIGNtLm9uICdjdXJzb3JBY3Rpdml0eScsID0+XG4gICAgICAgICAgcG9zID0gY20uZ2V0Q3Vyc29yKClcbiAgICAgICAgICBlbC5pbm5lckhUTUwgPSBwb3MubGluZSArICc6JyArIHBvcy5jaFxuICAgICAgYmFyLmFwcGVuZENoaWxkKGVsKVxuXG4gICAgY21XcmFwcGVyID0gdGhpcy5jb2RlbWlycm9yLmdldFdyYXBwZXJFbGVtZW50KClcbiAgICBjbVdyYXBwZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYmFyLCBjbVdyYXBwZXIubmV4dFNpYmxpbmcpXG4gICAgcmV0dXJuIGJhclxuXG4gIHRvZ2dsZUJsb2NrcXVvdGU6IC0+IHRvZ2dsZUJsb2NrcXVvdGUodGhpcylcblxuICB0b2dnbGVVbk9yZGVyZWRMaXN0OiAtPiB0b2dnbGVVbk9yZGVyZWRMaXN0KHRoaXMpXG5cbiAgdG9nZ2xlT3JkZXJlZExpc3Q6IC0+IHRvZ2dsZU9yZGVyZWRMaXN0KHRoaXMpXG5cbiAgZHJhd0xpbms6IC0+IGRyYXdMaW5rKHRoaXMpXG5cbiAgZHJhd0ltYWdlOiAtPiBkcmF3SW1hZ2UodGhpcylcblxuICB1bmRvOiAtPiB1bmRvKHRoaXMpXG5cbiAgcmVkbzogLT4gcmVkbyh0aGlzKVxuXG4gIHRvZ2dsZUZ1bGxTY3JlZW4gPSAtPiB0b2dnbGVGdWxsU2NyZWVuKHRoaXMpXG5cbk1kZXgudG9vbGJhciA9IFtcbiAge25hbWU6ICdib2xkJywgYWN0aW9uOiB0b2dnbGVCb2xkfVxuICB7bmFtZTogJ2l0YWxpYycsIGFjdGlvbjogdG9nZ2xlSXRhbGljfVxuICAnfCdcbiAge25hbWU6ICdxdW90ZScsIGFjdGlvbjogdG9nZ2xlQmxvY2txdW90ZX1cbiAge25hbWU6ICd1bm9yZGVyZWQtbGlzdCcsIGFjdGlvbjogdG9nZ2xlVW5PcmRlcmVkTGlzdH1cbiAge25hbWU6ICdvcmRlcmVkLWxpc3QnLCBhY3Rpb246IHRvZ2dsZU9yZGVyZWRMaXN0fVxuICAnfCdcbiAge25hbWU6ICdsaW5rJywgYWN0aW9uOiBkcmF3TGlua31cbiAge25hbWU6ICdpbWFnZScsIGFjdGlvbjogZHJhd0ltYWdlfVxuICAnfCdcbiAge25hbWU6ICdpbmZvJywgYWN0aW9uOiAnaHR0cDojbGFiLmxlcHR1cmUuY29tL2VkaXRvci9tYXJrZG93bid9XG4gIHtuYW1lOiAncHJldmlldycsIGFjdGlvbjogdG9nZ2xlUHJldmlld31cbiAge25hbWU6ICdmdWxsc2NyZWVuJywgYWN0aW9uOiB0b2dnbGVGdWxsU2NyZWVufVxuXVxuXG53aW5kb3cuTWRleCA9IE1kZXgiXX0=
