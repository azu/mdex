// Generated by CoffeeScript 1.7.1
var Editor, toolbar;

toolbar = [
  {
    name: 'bold',
    action: toggleBold
  }, {
    name: 'italic',
    action: toggleItalic
  }, '|', {
    name: 'quote',
    action: toggleBlockquote
  }, {
    name: 'unordered-list',
    action: toggleUnOrderedList
  }, {
    name: 'ordered-list',
    action: toggleOrderedList
  }, '|', {
    name: 'link',
    action: drawLink
  }, {
    name: 'image',
    action: drawImage
  }, '|', {
    name: 'info',
    action: 'http://lab.lepture.com/editor/markdown'
  }, {
    name: 'preview',
    action: togglePreview
  }, {
    name: 'fullscreen',
    action: toggleFullScreen
  }
];

Editor = (function() {
  var toggleFullScreen;

  Editor.markdown = function(text) {
    return marked(text);
  };

  Editor.toggleBold = toggleBold;

  Editor.toggleItalic = toggleItalic;

  Editor.toggleBlockquote = toggleBlockquote;

  Editor.toggleUnOrderedList = toggleUnOrderedList;

  Editor.toggleOrderedList = toggleOrderedList;

  Editor.drawLink = drawLink;

  Editor.drawImage = drawImage;

  Editor.undo = undo;

  Editor.redo = redo;

  Editor.toggleFullScreen = toggleFullScreen;

  Editor.prototype.toggleBold = function() {
    return toggleBold(this);
  };

  Editor.prototype.toggleItalic = function() {
    return toggleItalic(this);
  };

  function Editor(options) {
    var _ref;
    if (options == null) {
      options = {};
    }
    if (options.element) {
      this.element = options.element;
    }
    options.toolbar = (_ref = options.toolbar) != null ? _ref : Editor.toolbar;
    if (!options.hasOwnProperty('status')) {
      options.status = ['lines', 'words', 'cursor'];
    }
    this.options = options;
    if (this.element) {
      this.render();
    }
  }

  Editor.prototype.render = function(el) {
    var key, keyMaps, options, _fn, _i, _len, _ref;
    if (!el) {
      el = (_ref = this.element) != null ? _ref : document.getElementsByTagName('textarea')[0];
    }
    if (this._rendered && this._rendered === el) {
      return;
    }
    this.element = el;
    options = this.options;
    keyMaps = {};
    _fn = (function(_this) {
      return function(key) {
        return keyMaps[fixShortcut(key)] = function(cm) {
          return shortcuts[key](_this);
        };
      };
    })(this);
    for (_i = 0, _len = shortcuts.length; _i < _len; _i++) {
      key = shortcuts[_i];
      _fn(key);
    }
    keyMaps["Enter"] = "newlineAndIndentContinueMarkdownList";
    this.codemirror = CodeMirror.fromTextArea(el, {
      mode: 'markdown',
      theme: 'paper',
      indentWithTabs: true,
      lineNumbers: false,
      extraKeys: keyMaps
    });
    if (options.toolbar !== false) {
      this.createToolbar();
    }
    if (options.status !== false) {
      this.createStatusbar();
    }
    return this._rendered = this.element;
  };

  Editor.prototype.createToolbar = function(items) {
    var bar, cm, cmWrapper, i, item, _fn, _i, _len;
    items = items != null ? items : this.options.toolbar;
    if (!items || items.length === 0) {
      return;
    }
    bar = document.createElement('div');
    bar.className = 'editor-toolbar';
    this.toolbar = {};
    _fn = (function(_this) {
      return function(item) {
        var el, _ref;
        el = item.name ? createIcon(item.name, item) : item === '|' ? createSep() : createIcon(item);
        if (item.action) {
          if ((typeof item.action) === 'function') {
            el.onclick = function(e) {
              return item.action(_this);
            };
          } else if ((typeof item.action) === 'string') {
            el.href = item.action;
            el.target = '_blank';
          }
        }
        _this.toolbar[(_ref = item.name) != null ? _ref : item] = el;
        return bar.appendChild(el);
      };
    })(this);
    for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
      item = items[i];
      _fn(item);
    }
    cm = this.codemirror;
    cm.on('cursorActivity', (function(_this) {
      return function() {
        var key, stat, _j, _len1, _ref, _results;
        stat = getState(cm);
        _ref = _this.toolbar;
        _results = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          key = _ref[_j];
          _results.push((function(key) {
            var el;
            el = _this.toolbar[key];
            if (stat[key]) {
              return el.className += ' active';
            } else {
              return el.className = el.className.replace(/\s*active\s*/g, '');
            }
          })(key));
        }
        return _results;
      };
    })(this));
    cmWrapper = cm.getWrapperElement();
    cmWrapper.parentNode.insertBefore(bar, cmWrapper);
    return bar;
  };

  Editor.prototype.createStatusbar = function(status) {
    var bar, cm, cmWrapper, i, name, pos, _fn, _i, _len;
    status = status || this.options.status;
    if (!status || status.length === 0) {
      return;
    }
    bar = document.createElement('div');
    bar.className = 'editor-statusbar';
    pos = null;
    cm = this.codemirror;
    _fn = (function(_this) {
      return function(name) {
        var el;
        el = document.createElement('span');
        el.className = name;
        if (name === 'words') {
          el.innerHTML = '0';
          cm.on('update', function() {
            return el.innerHTML = wordCount(cm.getValue());
          });
        } else if (name === 'lines') {
          console.log;
          el.innerHTML = '0';
          cm.on('update', function() {
            return el.innerHTML = cm.lineCount();
          });
        } else if (name === 'cursor') {
          el.innerHTML = '0:0';
          cm.on('cursorActivity', function() {
            pos = cm.getCursor();
            return el.innerHTML = pos.line + ':' + pos.ch;
          });
        }
        return bar.appendChild(el);
      };
    })(this);
    for (i = _i = 0, _len = status.length; _i < _len; i = ++_i) {
      name = status[i];
      _fn(name);
    }
    cmWrapper = this.codemirror.getWrapperElement();
    cmWrapper.parentNode.insertBefore(bar, cmWrapper.nextSibling);
    return bar;
  };

  Editor.prototype.toggleBlockquote = function() {
    return toggleBlockquote(this);
  };

  Editor.prototype.toggleUnOrderedList = function() {
    return toggleUnOrderedList(this);
  };

  Editor.prototype.toggleOrderedList = function() {
    return toggleOrderedList(this);
  };

  Editor.prototype.drawLink = function() {
    return drawLink(this);
  };

  Editor.prototype.drawImage = function() {
    return drawImage(this);
  };

  Editor.prototype.undo = function() {
    return undo(this);
  };

  Editor.prototype.redo = function() {
    return redo(this);
  };

  toggleFullScreen = function() {
    return toggleFullScreen(this);
  };

  return Editor;

})();

Editor.toolbar = [
  {
    name: 'bold',
    action: toggleBold
  }, {
    name: 'italic',
    action: toggleItalic
  }, '|', {
    name: 'quote',
    action: toggleBlockquote
  }, {
    name: 'unordered-list',
    action: toggleUnOrderedList
  }, {
    name: 'ordered-list',
    action: toggleOrderedList
  }, '|', {
    name: 'link',
    action: drawLink
  }, {
    name: 'image',
    action: drawImage
  }, '|', {
    name: 'info',
    action: 'http://lab.lepture.com/editor/markdown'
  }, {
    name: 'preview',
    action: togglePreview
  }, {
    name: 'fullscreen',
    action: toggleFullScreen
  }
];
